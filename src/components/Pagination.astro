---
export interface Props {
  total: number;
  current: number;
  baseUrl: string;
  categoryFilter?: string;
  tagFilter?: string;
}

const { total, current, baseUrl, categoryFilter, tagFilter } = Astro.props;

const buildPageUrl = (page: number) => {
  const params = new URLSearchParams();
  
  if (categoryFilter) {
    params.set('cat', categoryFilter);
  }
  
  if (tagFilter) {
    params.set('tag', tagFilter);
  }
  
  if (page > 1) {
    params.set('page', page.toString());
  }
  
  const queryString = params.toString();
  return queryString ? `${baseUrl}?${queryString}` : baseUrl;
};

// Generate page numbers to show (max 7 pages)
const generatePageNumbers = () => {
  const pages: (number | string)[] = [];
  
  if (total <= 7) {
    // Show all pages if 7 or fewer
    for (let i = 1; i <= total; i++) {
      pages.push(i);
    }
  } else {
    // Always show first page
    pages.push(1);
    
    if (current <= 4) {
      // Current page is near the beginning
      for (let i = 2; i <= 5; i++) {
        pages.push(i);
      }
      pages.push('...');
      pages.push(total);
    } else if (current >= total - 3) {
      // Current page is near the end
      pages.push('...');
      for (let i = total - 4; i <= total; i++) {
        pages.push(i);
      }
    } else {
      // Current page is in the middle
      pages.push('...');
      for (let i = current - 1; i <= current + 1; i++) {
        pages.push(i);
      }
      pages.push('...');
      pages.push(total);
    }
  }
  
  return pages;
};

const pageNumbers = generatePageNumbers();
---

{total > 1 && (
  <nav class="flex items-center justify-center mt-12" aria-label="Pagination">
    <div class="flex items-center gap-1">
      <!-- Previous Button -->
      {current > 1 ? (
        <a
          href={buildPageUrl(current - 1)}
          class="flex items-center justify-center w-10 h-10 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-md hover:bg-gray-50 hover:text-gray-700 transition-colors"
          aria-label="Previous page"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </a>
      ) : (
        <span class="flex items-center justify-center w-10 h-10 text-sm font-medium text-gray-300 bg-white border border-gray-300 rounded-l-md cursor-not-allowed">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
          </svg>
        </span>
      )}

      <!-- Page Numbers -->
      {pageNumbers.map((page, index) => (
        page === '...' ? (
          <span class="flex items-center justify-center w-10 h-10 text-sm font-medium text-gray-700 bg-white border-t border-b border-gray-300">
            ...
          </span>
        ) : (
          <a
            href={buildPageUrl(page as number)}
            class={`flex items-center justify-center w-10 h-10 text-sm font-medium border-t border-b border-gray-300 transition-colors ${
              current === page
                ? 'bg-primary-600 text-white border-primary-600'
                : 'text-gray-700 bg-white hover:bg-gray-50 hover:text-gray-900'
            }`}
            aria-label={`Page ${page}`}
            aria-current={current === page ? 'page' : undefined}
          >
            {page}
          </a>
        )
      ))}

      <!-- Next Button -->
      {current < total ? (
        <a
          href={buildPageUrl(current + 1)}
          class="flex items-center justify-center w-10 h-10 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-md hover:bg-gray-50 hover:text-gray-700 transition-colors"
          aria-label="Next page"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </a>
      ) : (
        <span class="flex items-center justify-center w-10 h-10 text-sm font-medium text-gray-300 bg-white border border-gray-300 rounded-r-md cursor-not-allowed">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
          </svg>
        </span>
      )}
    </div>

    <!-- Page Info -->
    <div class="ml-4 text-sm text-gray-700">
      Page {current} of {total}
    </div>
  </nav>
)}

<style>
  nav {
    animation: fadeIn 0.3s ease-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>