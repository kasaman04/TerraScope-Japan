---
export interface Props {
  items: string[] | Array<{text: string; completed?: boolean}>;
}

const { items } = Astro.props;
---

<ul class="space-y-4">
  {items.map((item) => {
    const text = typeof item === 'string' ? item : item.text;
    const completed = typeof item === 'string' ? true : item.completed !== false;
    return (
      <li class="flex items-start">
        <svg class={`w-6 h-6 mr-3 flex-shrink-0 mt-0.5 ${completed ? 'text-green-500' : 'text-gray-400'}`} fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        <span class={`text-lg ${completed ? 'text-gray-700' : 'text-gray-500'}`}>{text}</span>
      </li>
    );
  })}
</ul>

<style>
  li {
    animation: fadeInUp 0.6s ease-out;
    animation-fill-mode: both;
  }
  
  li:nth-child(1) { animation-delay: 0.1s; }
  li:nth-child(2) { animation-delay: 0.2s; }
  li:nth-child(3) { animation-delay: 0.3s; }
  li:nth-child(4) { animation-delay: 0.4s; }
  li:nth-child(5) { animation-delay: 0.5s; }
  li:nth-child(6) { animation-delay: 0.6s; }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>