---
export interface Props {
  dataSrc: string;
  currentTag?: string;
}

const { dataSrc, currentTag } = Astro.props;

// Mock tags data for now
const tags = [
  { id: 'flood', label: 'Flood', color: 'cyan' },
  { id: 'zoning', label: 'Zoning', color: 'emerald' },
  { id: 'permit', label: 'Permit', color: 'amber' },
  { id: 'legal', label: 'Legal', color: 'blue' },
  { id: 'hazard', label: 'Hazard', color: 'red' },
  { id: 'drone', label: 'Drone', color: 'purple' }
];

// Get current URL for building filter links
const url = new URL(Astro.request.url);
const currentCategory = url.searchParams.get('cat');

const buildFilterUrl = (tagId?: string) => {
  const params = new URLSearchParams();
  
  if (currentCategory) {
    params.set('cat', currentCategory);
  }
  
  if (tagId) {
    params.set('tag', tagId);
  }
  
  // Reset to page 1 when filtering
  const queryString = params.toString();
  return queryString ? `/blog/?${queryString}` : '/blog/';
};
---

<div class="relative inline-block">
  <button
    id="tagDropdownButton"
    class="flex items-center gap-2 px-4 py-2 bg-white border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-primary-500"
    type="button"
  >
    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
    </svg>
    {currentTag ? tags.find(t => t.id === currentTag)?.label || 'Tags' : 'Tags'}
    <svg class="w-4 h-4 transition-transform" id="tagDropdownIcon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </button>

  <div
    id="tagDropdownMenu"
    class="hidden absolute right-0 mt-2 w-48 bg-white border border-gray-200 rounded-md shadow-lg z-10"
  >
    <div class="py-1">
      <!-- All Tags Option -->
      <a
        href={buildFilterUrl()}
        class={`block px-4 py-2 text-sm transition-colors ${
          !currentTag 
            ? 'bg-primary-50 text-primary-700' 
            : 'text-gray-700 hover:bg-gray-100'
        }`}
      >
        All Tags
      </a>
      
      <!-- Tag Options -->
      {tags.map((tag) => (
        <a
          href={buildFilterUrl(tag.id)}
          class={`block px-4 py-2 text-sm transition-colors ${
            currentTag === tag.id
              ? 'bg-primary-50 text-primary-700' 
              : 'text-gray-700 hover:bg-gray-100'
          }`}
        >
          <span class="flex items-center gap-2">
            <span class={`w-2 h-2 rounded-full bg-${tag.color}-500`}></span>
            {tag.label}
          </span>
        </a>
      ))}
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const button = document.getElementById('tagDropdownButton');
    const menu = document.getElementById('tagDropdownMenu');
    const icon = document.getElementById('tagDropdownIcon');
    
    if (!button || !menu || !icon) return;
    
    function toggleDropdown() {
      const isHidden = menu.classList.contains('hidden');
      
      if (isHidden) {
        menu.classList.remove('hidden');
        icon.style.transform = 'rotate(180deg)';
      } else {
        menu.classList.add('hidden');
        icon.style.transform = 'rotate(0deg)';
      }
    }
    
    function closeDropdown() {
      menu.classList.add('hidden');
      icon.style.transform = 'rotate(0deg)';
    }
    
    button.addEventListener('click', function(e) {
      e.stopPropagation();
      toggleDropdown();
    });
    
    // Close dropdown when clicking outside
    document.addEventListener('click', function(e) {
      if (!button.contains(e.target) && !menu.contains(e.target)) {
        closeDropdown();
      }
    });
    
    // Close dropdown when pressing Escape
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape') {
        closeDropdown();
      }
    });
  });
</script>

<style>
  .relative {
    animation: fadeIn 0.3s ease-out;
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>