---
export interface Props {
  list: string[];
  variant?: 'primary' | 'secondary' | 'success' | 'warning';
  size?: 'sm' | 'md' | 'lg';
}

const { list, variant = 'primary', size = 'md' } = Astro.props;

const getVariantClasses = (variant: string) => {
  switch (variant) {
    case 'primary':
      return 'bg-primary-100 text-primary-700 border-primary-200';
    case 'secondary':
      return 'bg-gray-100 text-gray-700 border-gray-200';
    case 'success':
      return 'bg-green-100 text-green-700 border-green-200';
    case 'warning':
      return 'bg-yellow-100 text-yellow-700 border-yellow-200';
    default:
      return 'bg-primary-100 text-primary-700 border-primary-200';
  }
};

const getSizeClasses = (size: string) => {
  switch (size) {
    case 'sm':
      return 'px-2 py-1 text-xs';
    case 'md':
      return 'px-3 py-1.5 text-sm';
    case 'lg':
      return 'px-4 py-2 text-base';
    default:
      return 'px-3 py-1.5 text-sm';
  }
};

const variantClasses = getVariantClasses(variant);
const sizeClasses = getSizeClasses(size);
---

<div class="metric-badges-container">
  <div class="flex flex-wrap gap-2 mb-4">
    {list.map((metric) => (
      <span class={`metric-badge ${variantClasses} ${sizeClasses}`}>
        {metric}
      </span>
    ))}
  </div>
</div>

<style>
  .metric-badges-container {
    margin: 1rem 0;
  }
  
  .metric-badge {
    display: inline-flex;
    align-items: center;
    font-weight: 500;
    border-radius: 9999px; /* fully rounded */
    border: 1px solid;
    transition: all 0.2s ease;
    white-space: nowrap;
    letter-spacing: 0.025em;
  }
  
  .metric-badge:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }
  
  /* Animation for badges appearing */
  .metric-badge {
    animation: fadeInUp 0.5s ease-out;
    animation-fill-mode: both;
  }
  
  .metric-badge:nth-child(1) { animation-delay: 0.1s; }
  .metric-badge:nth-child(2) { animation-delay: 0.2s; }
  .metric-badge:nth-child(3) { animation-delay: 0.3s; }
  .metric-badge:nth-child(4) { animation-delay: 0.4s; }
  .metric-badge:nth-child(5) { animation-delay: 0.5s; }
  .metric-badge:nth-child(6) { animation-delay: 0.6s; }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  /* Responsive adjustments */
  @media (max-width: 640px) {
    .metric-badges-container {
      margin: 0.75rem 0;
    }
    
    .flex {
      gap: 0.5rem;
    }
  }
  
  /* Focus styles for accessibility */
  .metric-badge:focus {
    outline: 2px solid #3b82f6;
    outline-offset: 2px;
  }
  
  /* Print styles */
  @media print {
    .metric-badge {
      border: 1px solid #000;
      background: transparent !important;
      color: #000 !important;
    }
  }
</style>